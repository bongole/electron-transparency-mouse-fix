<!--
  All code needed for electron-transparency-mouse-fix
    is available inside this file. 

  References:
  - https://developer.mozilla.org/en-US/docs/Web/CSS/pointer-events
  - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#Attributes
     ==> 'defer' attribute
-->

<html>
  <head>
    <meta charset="utf-8">
    <title>Transparency demo - electron-transparency-mouse-fix</title>
    <link rel="stylesheet" href="demo.css">
  </head>
<body class="click-through"
  data-tag="body.click-through">

<!------------------------ HTML ---------------------->

  
  <div class="click-on"
    data-tag=".click-on > *">
    <div class="row">
      <div class="button">Click</div>
      <div class="drag-handle">⠿</div>
      <input type="button" value="Native"
        onclick="this.classList.toggle('clicked')">
      <div class="drag-drop" draggable="true"
        ondrop="
          this.innerHTML = event.dataTransfer.files[0].path.split('\\').pop();
          this.classList.add('dropped');
          console.log(event.dataTransfer);
        "
        ondragstart="
          if (this.classList.contains('dropped'))
            event.dataTransfer.setData('DownloadURL', 'text/plain:generated-file.txt:data:text/plain;base64,' + btoa(`You dropped a file called ${this.innerHTML}`));
          else
            event.preventDefault()
        ">
        Drag & drop files</div>
      <div class="etmf-void">
        Void
      </div>
      <div class="button click-through mark-nope">Nope</div>
      <input class="click-through mark-nope" type="button" value="Native nope"
        onclick="this.classList.toggle('clicked')">
    </div>
  </div>

  <div class="margin click-through"
    data-tag=".click-through > *.click-on"
    data-bug="BUG: -webkit-app-region">
    <div class="row">
      <div class="button click-on mark">Click</div>
      <div class="drag-handle mark-bug click-on">⠿</div>
      <input class="click-on mark" type="button" value="Native"
        onclick="this.classList.toggle('clicked')">
      <div class="drag-drop click-on mark" draggable="true"
        ondrop="
          this.innerHTML = event.dataTransfer.files[0].path.split('\\').pop();
          this.classList.add('dropped');
          console.log(event.dataTransfer);
        "
        ondragstart="
          if (this.classList.contains('dropped'))
            event.dataTransfer.setData('DownloadURL', 'text/plain:generated-file.txt:data:text/plain;base64,' + btoa(`You dropped a file called ${this.innerHTML}`));
          else
            event.preventDefault()
        ">
        Drag & drop files</div>
      <div class="etmf-void">
        Void
      </div>
      <div class="button click-through mark-nope">Nope</div>
      <input class="click-through mark-nope" type="button" value="Native nope"
        onclick="this.classList.toggle('clicked')">
    </div>
  </div>

<!------------------------ CSS ----------------------->

<style>
/*
  The following CSS rules are applied on script initialization:
  
  ┌
  │ html {
  │   pointer-events: none;
  │ }
  │
  │ body {
  │   position: relative;
  │   // otherwise buggy when an absolute child is positioned relative
  │   // to the html bounding box
  │ }
  └
  
  The pointer-events rule is inherited from parent to child, so if you
   re-enable it on a nested element, the element and its children will
   receive pointer events again. To override the rule (eg. while
   debugging), use:

  ┌CSS 
  │ html {
  │   pointer-events: all !important;
  │ }
  └
  or
  ┌JS
  │ document.documentElement.style.pointerEvents = 'all';
  └

  The override won't accept pointer events on the <html> element 
   due to performance reasons.

  If you want top-level element to ignore mouse events but 
   prevent it from clicking through the window, simply place it
   within a container that captures the events with an enabled
   pointer-events css rule. Use pointer-events: none; or equivalent
   on the child.

  If you want top-level elements to click through the whole window,
   you need to enable pointer-events and set the --etmf: void; rule in css.
   Pointer events need to be enabled so javascript can read the --etmf variable.
*/

.click-on      {pointer-events: all}
.click-through {pointer-events: none}


</style>




<!------------------------ JS ------------------------>

<script defer>
/*
  The script can be loaded from within your HTML file, making it
   easily portable. 

  Use <script defer> to make sure it loads after all dom elements
   are available.

  Use in production:
   const TransparencyMouseFix = require('electron-transparency-mouse-fix')
*/

const TransparencyMouseFix = require('../dist/electron-transparency-mouse-fix.js')
const fix = new TransparencyMouseFix({
  log: true,
  fixPointerEvents: 'auto'
})


</script>


















</body>
</html>