{"version":3,"sources":["../src/electron-transparency-mouse-fix.js"],"names":[],"mappings":"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","file":"electron-transparency-mouse-fix.js","sourcesContent":["'use strict'\n\n/**\n * @module TransparencyMouseFix\n */\n\n// TODO: Linux: can't drop files out of electron?\n// TODO: Windows: can't drag files over voids\n\n // No external dependencies!\nconst electron = require('electron')\n\n// Style for the default console logging tag\nconst consoleTag = [ \n  '%celectron-transparency-mouse-fix',\n  `margin-right: .25em;padding: .1em .4em;border-radius: .25em;background-color: #3eabdc;color: white;font-weight: bold;`\n]\n\n/** Provide click-through support for Electron BrowserWindows */\nclass TransparencyMouseFix {\n  \n  /**\n   * Creates an instance of TransparencyMouseFix\n   * @param {Object} options\n   * @param {electron.BrowserWindow} options.electronWindow\n   * @param {Window} options.htmlWindow\n   * @param {(boolean|string)} options.fixPointerEvents\n   * @param {(boolean|string)} options.fixPointerEvents\n   */\n  constructor ({\n      electronWindow= electron.remote.getCurrentWindow(),\n      htmlWindow= window,\n      fixPointerEvents= 'auto',\n      log= false\n  }={}) {\n    // Set local variables\n    // > constant\n    // > public\n    /**\n     * The window to receive mouseevents\n     * @type {electron.BrowserWindow}\n     */\n    this.electronWindow = electronWindow\n    /**\n     * The renderers window/global variable\n     * @type {Object}\n     */\n    this.htmlWindow = htmlWindow\n    // > private\n    /**\n     * Latches the state of setIgnoreMouseEvents\n     * @private\n     */\n    this._ignoringMouse = true\n    /**\n     * Counts the amount of parallel getAnimationFrame loops (maxed to 1)\n     * @private\n     */\n    this.altCheckHover._instanceCount = 0\n    /**\n     * Event listener callback tied to 'TransparencyMouseFix' scope\n     * @private\n     */\n    this._scopedOnMouseEvent = event => this.onMouseEvent(event)\n    /**\n     * Event listener callback tied to 'TransparencyMouseFix' scope\n     * @private\n     */\n    this._scopedAltCheckHover = () => this.altCheckHover()\n    this.log = log\n    this.fixPointerEvents = fixPointerEvents\n\n    // Register event listeners\n    this.registerWindow()\n\n    // Workaround for:\n    //   https://github.com/electron/electron/issues/15376\n    //   setIgnoreMouseEvents({forward: true}) stops forwarding\n    //     after a page reload  \n    this.htmlWindow.addEventListener('beforeunload', function () {\n      sessionStorage.setItem('etmf-reloaded','true')\n    })\n  }\n  \n  \n  get log () {return this._log}\n  /**\n   * Enable or disable logging with an optional function for styling the console output.\n   * @access public\n   * @type {function}\n   * @param  {(boolean|function)} fn true | false | function (logLevel,...msg) {<..>}\n   */\n  set log ( fn ) {\n    if (typeof(fn) === 'function') {\n      this._log = fn\n    } else if (fn) {\n      this._log = function ( level, ...msg ) {\n        console[level](...consoleTag, ...msg)\n      }\n    } else {\n      this._log = false\n    }\n  }\n  \n  get fixPointerEvents () {return this._fixPointerEvents}\n  /** \n   * Emulation for BrowserWindow.setIgnoreMouseEvents(true, {forward: true})\n   * <li>Linux: has no support => fully replaced<br>\n   * <li>Windows: (BUG) only after a reload (see electron/electron#15376)\n   * @access public\n   * @type {boolean}\n   * @param {(boolean|string)} condition 'auto'=true | off'=false | 'force' | 'linux'\n   */\n  set fixPointerEvents ( condition ) {\n    condition = condition ? typeof condition === 'string' ? \n        condition.toLowerCase() : true : false\n\n    switch (condition) {\n      case false:\n      case 'off':\n        this._fixPointerEvents = false\n        break\n      case 'force':\n        this._fixPointerEvents = true\n        break\n      case 'linux':\n        this._fixPointerEvents = \n          process.platform !== 'win32' \n          && process.platform !== 'darwin'\n        break\n      case 'auto':\n      default:\n        this._fixPointerEvents = false\n        if (process.platform === 'win32') {\n          if (sessionStorage.getItem('etmf-reloaded') === 'true')\n            this._fixPointerEvents = true\n        } else if (process.platform !== 'darwin') {\n          this._fixPointerEvents = true\n        }\n        break\n    }\n\n    // Start polling here so you can manually change the mode.\n    // The function is adjusted so you can't have 2 parallel polling loops\n    if (this._fixPointerEvents)\n      this.altCheckHover(true)\n  }\n\n  \n  /**\n   * Register mouse movement event listeners and prepare styling.\n   * @access public\n   */\n  registerWindow () {\n    this.htmlWindow.addEventListener('mousemove', this._scopedOnMouseEvent)\n    this.htmlWindow.addEventListener('dragover', this._scopedOnMouseEvent)\n    let styleSheet = this.htmlWindow.document.createElement('style')\n    styleSheet.classList.add('etmf-css')\n    styleSheet.innerHTML = `\n      html {pointer-events: none}\n      body {position: relative}\n    `\n    this.htmlWindow.addEventListener('beforeunload', ()=>this.unregisterWindow(this.htmlWindow))\n    this.log && this.log('info', 'Registered event listener')\n  }\n\n  /**\n   * @access public\n   * Remove event listeners.\n   */\n\n  unregisterWindow () { // keep for manual use\n    this.htmlWindow.removeEventListener('mousemove', this._scopedOnMouseEvent)\n    this.htmlWindow.removeEventListener('dragover', this._scopedOnMouseEvent)\n    this.electronWindow.setIgnoreMouseEvents(false)\n    this.log && this.log('info', 'Removed event listener')\n  }\n\n  /**\n   * Handles events like mousemove, dragover, ..\n   * @param {(MouseEvent|DragEvent|Object.<string, HTMLElement>)} event \n   */\n  onMouseEvent ( event ) {\n    this.log && this.log('debug', event)\n\n    let sinkHole = event.target.classList.contains('etmf-void')\n\n    // Handle dragging events\n    if (event.type === 'dragover') {\n      event.preventDefault() // fixes dropping files inside electron\n      if (!sinkHole)\n        return\n    }\n\n    // Is the pointer is hovering an element that receives events?\n    let reachedBottom = event.target === this.htmlWindow.document.documentElement\n    let ignoreEvents = sinkHole || reachedBottom\n    if (ignoreEvents) {\n      // Latched state\n      if (this._ignoringMouse) return\n      this._ignoringMouse = true\n      \n      // Apply pass-through-window on pointer events\n      if (this.fixPointerEvents)  { \n        // Circumvent forwarding of ignored mouse events\n        // TODO: pause on minimize/hide/.. \n        this.electronWindow.setIgnoreMouseEvents(true, {forward: false})\n        this.altCheckHover(true)\n        this.log && this.log('info', 'mouse off (polling)')\n      } else {\n        // Ignore mouse events with built-in forwarding\n        this.electronWindow.setIgnoreMouseEvents(true, {forward: true})\n        this.log && this.log('info', 'mouse off (listening)')\n      }\n    } else {\n      // Latched state\n      if (!this._ignoringMouse) return\n      this._ignoringMouse = false\n\n      // Catch all mouse events\n      this.electronWindow.setIgnoreMouseEvents(false)\n      this.log && this.log('info', 'mouse on (listening)')\n    }\n  }\n\n  /**\n   * Circumvent the lack of forwarded mouse events by polling mouse position with requestAnimationFrame\n   * @param {boolean} once Don't request a next animationFrame\n   * @returns {boolean} True if a element is found besides sinkholes or the main <html> element\n   */\n  altCheckHover ( first=false ) {\n    // HINT: you can manually stop the loop by incrementing _instanceCount\n    if (first) {\n      this.altCheckHover._instanceCount++\n    }\n    if (this.altCheckHover._instanceCount > 1) {\n      this.log && this.log('warn', 'aborting', this.altCheckHover._instanceCount, 'parallel altCheckHover polls')\n      this.altCheckHover._instanceCount--\n      return null\n    }\n\n    // If the cursor is within content bounds, check the element it's hovering,\n    //   emulate a MouseMove event with the element as target\n    let{x,y} = electron.screen.getCursorScreenPoint()\n    let {x:left, y:top, width, height} = this.electronWindow.getContentBounds()\n    this.log && this.log('debug', {mouse: {x,y}, window: {left,top,width,height}})\n    if (x >= left && x < left+width && y >= top && y < top+height) {\n      let tgt = document.elementFromPoint(x-left, y-top)\n      // HINT: update classList checks when expanding code\n      if (tgt && !tgt.classList.contains('etmf-void') && tgt !== this.htmlWindow.document.documentElement) {\n        this.onMouseEvent({target: tgt})\n        this.altCheckHover._instanceCount--\n        return true\n      }\n    }\n\n    requestAnimationFrame(this._scopedAltCheckHover)\n    return false\n  }\n}\n\nmodule.exports = TransparencyMouseFix"]}