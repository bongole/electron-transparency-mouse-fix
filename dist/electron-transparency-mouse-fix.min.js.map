{"version":3,"sources":["../src/electron-transparency-mouse-fix.js"],"names":[],"mappings":"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","file":"electron-transparency-mouse-fix.min.js","sourcesContent":["'use strict'\n\n/**\n * @module TransparencyMouseFix\n */\n\n// TODO: Linux: can't drop files out of electron?\n// TODO: Windows: can't drag files over voids\n\n // No external dependencies!\nconst electron = require('electron')\n\n// Style for the default console logging tag\nconst consoleTag = [ \n  '%celectron-transparency-mouse-fix',\n  `margin-right: .25em;padding: .1em .4em;border-radius: .25em;background-color: #3eabdc;color: white;font-weight: bold;`\n]\n\n/** Provide click-through support for Electron BrowserWindows */\nclass TransparencyMouseFix {\n  \n  /**\n   * Creates an instance of TransparencyMouseFix\n   * @param {Object} options\n   * @param {electron.BrowserWindow} options.electronWindow\n   * @param {Window} options.htmlWindow\n   * @param {(boolean|string)} options.fixPointerEvents\n   * @param {(boolean|string)} options.fixPointerEvents\n   */\n  constructor ({\n      electronWindow= electron.remote.getCurrentWindow(),\n      htmlWindow= window,\n      fixPointerEvents= 'auto',\n      log= false\n  }={}) {\n    // Set local variables\n    // > constant\n    // > public\n    /**\n     * The window to receive mouseevents\n     * @type {electron.BrowserWindow}\n     */\n    this.electronWindow = electronWindow\n    /**\n     * The renderers window/global variable\n     * @type {Object}\n     */\n    this.htmlWindow = htmlWindow\n    // > private\n    /**\n     * Latches the state of setIgnoreMouseEvents\n     * @private\n     */\n    this._ignoringMouse = true\n    /**\n     * Counts the amount of parallel getAnimationFrame loops (maxed to 1)\n     * @private\n     */\n    this.altCheckHover._instanceCount = 0\n    /**\n     * Event listener callback tied to 'TransparencyMouseFix' scope\n     * @private\n     */\n    this._scopedOnMouseEvent = event => this.onMouseEvent(event)\n    /**\n     * Event listener callback tied to 'TransparencyMouseFix' scope\n     * @private\n     */\n    this._scopedAltCheckHover = () => this.altCheckHover()\n    this.log = log\n    this.fixPointerEvents = fixPointerEvents\n\n    // Register event listeners\n    this.registerWindow()\n\n    // Workaround for:\n    //   https://github.com/electron/electron/issues/15376\n    //   setIgnoreMouseEvents({forward: true}) stops forwarding\n    //     after a page reload  \n    this.htmlWindow.addEventListener('beforeunload', function () {\n      sessionStorage.setItem('etmf-reloaded','true')\n    })\n  }\n  \n  \n  get log () {return this._log}\n  /**\n   * Enable or disable logging with an optional function for styling the console output.\n   * @access public\n   * @type {function}\n   * @param  {(boolean|function)} fn true | false | function (logLevel,...msg) {<..>}\n   */\n  set log ( fn ) {\n    if (typeof(fn) === 'function') {\n      this._log = fn\n    } else if (fn) {\n      this._log = function ( level, ...msg ) {\n        console[level](...consoleTag, ...msg)\n      }\n    } else {\n      this._log = false\n    }\n  }\n  \n  get fixPointerEvents () {return this._fixPointerEvents}\n  /** \n   * Emulation for BrowserWindow.setIgnoreMouseEvents(true, {forward: true})\n   * <li>Linux: has no support => fully replaced<br>\n   * <li>Windows: (BUG) only after a reload (see electron/electron#15376)\n   * @access public\n   * @type {boolean}\n   * @param {(boolean|string)} condition 'auto'=true | off'=false | 'force' | 'linux'\n   */\n  set fixPointerEvents ( condition ) {\n    condition = condition ? typeof condition === 'string' ? \n        condition.toLowerCase() : true : false\n\n    switch (condition) {\n      case false:\n      case 'off':\n        this._fixPointerEvents = false\n        break\n      case 'force':\n        this._fixPointerEvents = true\n        break\n      case 'linux':\n        this._fixPointerEvents = \n          process.platform !== 'win32' \n          && process.platform !== 'darwin'\n        break\n      case 'auto':\n      default:\n        this._fixPointerEvents = false\n        if (process.platform === 'win32') {\n          if (sessionStorage.getItem('etmf-reloaded') === 'true')\n            this._fixPointerEvents = true\n        } else if (process.platform !== 'darwin') {\n          this._fixPointerEvents = true\n        }\n        break\n    }\n\n    // Start polling here so you can manually change the mode.\n    // The function is adjusted so you can't have 2 parallel polling loops\n    if (this._fixPointerEvents)\n      this.altCheckHover(true)\n  }\n\n  \n  /**\n   * Register mouse movement event listeners and prepare styling.\n   * @access public\n   */\n  registerWindow () {\n    this.htmlWindow.addEventListener('mousemove', this._scopedOnMouseEvent)\n    this.htmlWindow.addEventListener('dragover', this._scopedOnMouseEvent)\n    let styleSheet = this.htmlWindow.document.createElement('style')\n    styleSheet.classList.add('etmf-css')\n    styleSheet.innerHTML = `\n      html {pointer-events: none}\n      body {position: relative}\n    `\n    this.htmlWindow.addEventListener('beforeunload', ()=>this.unregisterWindow(this.htmlWindow))\n    this.log && this.log('info', 'Registered event listener')\n  }\n\n  /**\n   * @access public\n   * Remove event listeners.\n   */\n\n  unregisterWindow () { // keep for manual use\n    this.htmlWindow.removeEventListener('mousemove', this._scopedOnMouseEvent)\n    this.htmlWindow.removeEventListener('dragover', this._scopedOnMouseEvent)\n    this.electronWindow.setIgnoreMouseEvents(false)\n    this.log && this.log('info', 'Removed event listener')\n  }\n\n  /**\n   * Handles events like mousemove, dragover, ..\n   * @param {(MouseEvent|DragEvent|Object.<string, HTMLElement>)} event \n   */\n  onMouseEvent ( event ) {\n    this.log && this.log('debug', event)\n\n    let sinkHole = event.target.classList.contains('etmf-void')\n\n    // Handle dragging events\n    if (event.type === 'dragover') {\n      event.preventDefault() // fixes dropping files inside electron\n      if (!sinkHole)\n        return\n    }\n\n    // Is the pointer is hovering an element that receives events?\n    let reachedBottom = event.target === this.htmlWindow.document.documentElement\n    let ignoreEvents = sinkHole || reachedBottom\n    if (ignoreEvents) {\n      // Latched state\n      if (this._ignoringMouse) return\n      this._ignoringMouse = true\n      \n      // Apply pass-through-window on pointer events\n      if (this.fixPointerEvents)  { \n        // Circumvent forwarding of ignored mouse events\n        // TODO: pause on minimize/hide/.. \n        this.electronWindow.setIgnoreMouseEvents(true, {forward: false})\n        this.altCheckHover(true)\n        this.log && this.log('info', 'mouse off (polling)')\n      } else {\n        // Ignore mouse events with built-in forwarding\n        this.electronWindow.setIgnoreMouseEvents(true, {forward: true})\n        this.log && this.log('info', 'mouse off (listening)')\n      }\n    } else {\n      // Latched state\n      if (!this._ignoringMouse) return\n      this._ignoringMouse = false\n\n      // Catch all mouse events\n      this.electronWindow.setIgnoreMouseEvents(false)\n      this.log && this.log('info', 'mouse on (listening)')\n    }\n  }\n\n  /**\n   * Circumvent the lack of forwarded mouse events by polling mouse position with requestAnimationFrame\n   * @param {boolean} once Don't request a next animationFrame\n   * @returns {boolean} True if a element is found besides sinkholes or the main <html> element\n   */\n  altCheckHover ( first=false ) {\n    // HINT: you can manually stop the loop by incrementing _instanceCount\n    if (first) {\n      this.altCheckHover._instanceCount++\n    }\n    if (this.altCheckHover._instanceCount > 1) {\n      this.log && this.log('warn', 'aborting', this.altCheckHover._instanceCount, 'parallel altCheckHover polls')\n      this.altCheckHover._instanceCount--\n      return null\n    }\n\n    // If the cursor is within content bounds, check the element it's hovering,\n    //   emulate a MouseMove event with the element as target\n    let{x,y} = electron.screen.getCursorScreenPoint()\n    let {x:left, y:top, width, height} = this.electronWindow.getContentBounds()\n    this.log && this.log('debug', {mouse: {x,y}, window: {left,top,width,height}})\n    if (x >= left && x < left+width && y >= top && y < top+height) {\n      let tgt = document.elementFromPoint(x-left, y-top)\n      // HINT: update classList checks when expanding code\n      if (tgt && !tgt.classList.contains('etmf-void') && tgt !== this.htmlWindow.document.documentElement) {\n        this.onMouseEvent({target: tgt})\n        this.altCheckHover._instanceCount--\n        return true\n      }\n    }\n\n    requestAnimationFrame(this._scopedAltCheckHover)\n    return false\n  }\n}\n\nmodule.exports = TransparencyMouseFix"]}